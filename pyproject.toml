[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "yourMoment"
version = "0.1.0"
description = "yourMoment - LLM-gestützte Kommentare für die myMoment-Plattform"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "yourMoment Development Team"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.11,<3.14"
# Hinweis: Python 3.13 experimenteller Free-Threading-Build wird unterstützt
dependencies = [
    # Web-Framework
    "fastapi>=0.118.0,<0.120.0",
    "uvicorn[standard]>=0.37.0,<0.40.0",
    "gunicorn>=23.0.0,<24.0.0",
    "jinja2>=3.1.6,<4.0.0",

    # Datenbank
    "sqlalchemy>=2.0.43,<2.1.0",
    "alembic>=1.16.5,<2.0.0",
    "asyncpg>=0.30.0,<0.32.0",
    "aiomysql>=0.2.0,<0.3.0",
    "aiosqlite>=0.21.0,<0.22.0",

    # Authentifizierung
    "bcrypt>=4.3.0,<5.0.0",
    "pyjwt>=2.10.1,<3.0.0",

    # Aufgabenverarbeitung
    "celery[redis]>=5.4.0,<6.0.0",
    "redis>=4.5.2,<6.0.0",

    # LLM-Integration
    "instructor>=1.11.3,<2.0.0",
    "openai>=1.70.0,<2.0.0",
    "mistralai>=1.9.11,<2.0.0",
    # huggingface-hub temporarily removed - will be re-added via LiteLLM integration

    # Web-Scraping
    "aiohttp>=3.11.0,<3.13.0",
    "yarl>=1.17.0,<2.0.0",
    "beautifulsoup4>=4.14.2,<5.0.0",

    # HTTP Client
    "urllib3>=2.2.0,<3.0.0",

    # Core dependencies (explicit constraints for reliable resolution)
    "typing-extensions>=4.12.0,<5.0.0",

    # Verschlüsselung & Sicherheit
    "cryptography>=46.0.2,<47.0.0",
    "pydantic[email]>=2.11.10,<3.0.0",
    "python-multipart>=0.0.20,<0.1.0",

    # Protokollierung & Überwachung
    # (Using built-in Python logging - simplified)

    # Konfiguration
    "pydantic-settings>=2.11.0,<3.0.0",

    # Hilfswerkzeuge
    "httpx>=0.28.1,<0.30.0",
]

[project.optional-dependencies]
dev = [
    # Testen
    "pytest>=8.4.2,<9.0.0",
    "pytest-asyncio>=1.2.0,<2.0.0",
    "pytest-cov>=7.0.0,<8.0.0",
    "httpx>=0.28.1,<0.30.0",
    "pytest-mock>=3.15.1,<4.0.0",

    # Code-Qualität
    "black>=25.9.0,<26.0.0",
    "isort>=6.0.1,<7.0.0",
    "flake8>=7.3.0,<8.0.0",
    "mypy>=1.18.2,<2.0.0",
    "pre-commit>=4.3.0,<5.0.0",

    # Entwicklungstools
    "ipython>=9.3.0,<10.0.0",
    "ipdb>=0.13.13,<0.14.0",
    "watchfiles>=1.1.0,<2.0.0",
]

test = [
    # Core testing framework
    "pytest>=8.4.2,<9.0.0",
    "pytest-asyncio>=1.2.0,<2.0.0",
    "pytest-cov>=7.0.0,<8.0.0",
    "pytest-mock>=3.15.1,<4.0.0",
    "pytest-xdist>=3.6.1,<4.0.0",           # Parallel test execution
    "pytest-timeout>=2.3.1,<3.0.0",         # Test timeouts for async operations
    "pytest-env>=1.1.5,<2.0.0",             # Environment variable management

    # FastAPI testing
    "httpx>=0.28.1,<0.30.0",                 # Async HTTP client for FastAPI testing
    "fastapi[testing]>=0.118.0,<0.120.0",    # FastAPI test utilities

    # Database testing
    "pytest-redis>=3.1.0,<4.0.0",          # Redis test fixtures
    "alembic>=1.16.5,<2.0.0",              # Database migration testing

    # Mock and fixtures
    "responses>=0.25.3,<0.26.0",            # HTTP response mocking
    "pytest-factoryboy>=2.7.0,<3.0.0",     # Test data factories
    "freezegun>=1.5.1,<2.0.0",             # Time mocking for testing

    # Performance and load testing
    "pytest-benchmark>=5.1.0,<6.0.0",      # Performance benchmarking
    "locust>=2.34.0,<3.0.0",               # Load testing framework

    # Security testing
    "bandit>=1.8.0,<2.0.0",                # Security vulnerability scanner

    # Testing utilities
    "faker>=34.0.0,<35.0.0",                # Test data generation
    "dirty-equals>=0.8.0,<0.9.0",          # Flexible equality testing
]

[project.urls]
Homepage = "https://github.com/fgrng/yourMoment"
Repository = "https://github.com/fgrng/yourMoment"
Issues = "https://github.com/fgrng/yourMoment/issues"

[project.scripts]
yourMoment = "src.main:app"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=90",
    "--tb=short",
    "--no-cov-on-fail",
    "-ra",
]
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# FastAPI testing configuration
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]
# Test markers for TDD workflow and project structure
markers = [
    "slow: markiert Tests als langsam (abwählen mit '-m \"not slow\"')",
    "integration: markiert Tests als Integrationstests",
    "contract: markiert Tests als API-Vertragstests (TDD Phase 3.2)",
    "unit: markiert Tests als Unit-Tests",
    "performance: markiert Tests als Performance-Tests (<500ms requirement)",
    "e2e: markiert Tests als End-to-End Tests",
    "auth: markiert Tests für Authentifizierung",
    "web_scraping: markiert Tests für myMoment Web-Scraping",
    "llm: markiert Tests für LLM-Integration",
    "encryption: markiert Tests für Verschlüsselung",
    "celery: markiert Tests für Background-Tasks",
    "database: markiert Tests die eine Datenbank benötigen",
    "external_api: markiert Tests die externe APIs verwenden",
    "requires_redis: markiert Tests die Redis benötigen",
]
# Test discovery patterns
norecursedirs = [
    ".*",
    "build",
    "dist",
    "CVS",
    "_darcs",
    "{arch}",
    "*.egg",
    "venv*",
    ".venv*",
    "htmlcov",
]

# Environment variables for testing (requires pytest-env plugin)
[tool.pytest_env]
TESTING = "true"
DATABASE_URL = "sqlite+aiosqlite:///test.db"
REDIS_URL = "redis://localhost:6379/0"
SECRET_KEY = "test-secret-key-for-testing-only"
ENCRYPTION_KEY = "test-encryption-key-for-testing-32b"

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
concurrency = ["thread", "greenlet"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
    "*/static/vendor/*",
    "src/lib/dev_tools.py",
    "src/scripts/*",
]
# Include async context tracking
context = '${TOX_ENV_NAME}'

[tool.coverage.report]
# Show missing lines in terminal output
show_missing = true
skip_covered = false
skip_empty = true
# Precision for coverage percentage
precision = 2
# Exclude lines that don't need testing
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug:",
    "if settings.DEBUG",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "except ImportError:",
    "except ModuleNotFoundError:",
    "pass",
    "\\.\\.\\.",
]
# Require minimum coverage for individual files
fail_under = 90
# Sort output by coverage percentage
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"
title = "yourMoment Test Coverage Report"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"
show_contexts = true

[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Verzeichnisse
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "tests"]
skip = ["migrations"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "migrations/",
    "venv/",
    ".venv/",
]

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "instructor.*",
    "sentry_sdk.*",
]
ignore_missing_imports = true

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "migrations",
    ".venv",
    "venv",
    "build",
    "dist",
]
